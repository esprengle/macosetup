#!/usr/bin/env bash
# shellcheck disable=SC1090
# shellcheck disable=SC2034
# shellcheck disable=SC2153
# shellcheck disable=SC2154

# defaults
msx_prefix="/usr/local"
msx_etc="$msx_prefix/etc/macosetup"
msx_share="$msx_prefix/share/macosetup"

msx_config_search=(
  "$(cd "$(dirname "${BASH_SOURCE[0]}")" && echo "$PWD")/etc"
  "$msx_etc"
)
msx_config=""
msx_module_search=(
  "$(cd "$(dirname "${BASH_SOURCE[0]}")" && echo "$PWD")/share"
  "$msx_share"
)

readonly msx_module_category=(
  "shell"
  "homebrew"
  "system_preferences"
  "applications"
  "misc"
)

# user
readonly msx_username="$(whoami)"
#readonly msx_fullname="$(finger -m "${msx_username}" | awk '/Name:/ { print $4 }')"
readonly msx_fullname="$(dscl . read "/Users/$msx_username" RealName | column -x | tr -d '\t' | awk '/RealName: /{print $2}')"
readonly msx_sip_status="$(csrutil status | awk -F'status: ' '{print $2}')"

# version
readonly msx_self="$(basename "$0")"
readonly msx_version="v0.0.1"
readonly msx_url="https://sh0shin.org/macosetup"

msx_check_support()
{
  if [[ "$OSTYPE" != darwin* ]]
  then
    echo "Only Darwin/macOS is supported!"
    exit 1
  fi
}

msx_check_sip()
{
  if [[ "$msx_sip_status" == "enabled" ]]
  then
    echo "[W] SIP is enabled."
    echo "[W] some settings may fail!"
    read -p "press RETURN to continue." -r
  elif [[ "$msx_sip_status" == "disabled." ]]
  then
    echo "[I] SIP is disabled!"
  fi
}

msx_check_config()
{
  if [[ -e "$msx_config" ]]
  then
    source "$msx_config"
    echo "[C] $(basename "${msx_config%.cfg}")"
  else
    # TODO: search config in $msx_config_search
    echo "[E] config not found: $msx_config"
    exit 1
  fi
}

msx_module_get()
{
  local msx_module_wanted msx_wanted msx_category msx_search msx_module_found
  msx_module_wanted=("$@")

  for msx_wanted in "${msx_module_wanted[@]:-"all"}"
  do
    for msx_category in "${msx_module_category[@]}"
    do
      for msx_search in "${msx_module_search[@]}"
      do
        if [[ -d "$msx_search/$msx_category" ]]
        then
          # all modules
          if [[ "$msx_wanted" == "all" ]]
          then
            msx_module_found+="$(echo -n "$msx_search/$msx_category"/*.msx) "
            break
          # wanted module(s)
          else
            if [[ -f "$msx_search/$msx_category/$msx_wanted.msx" ]]
            then
              msx_module_found+="$msx_search/$msx_category/$msx_wanted.msx "
              break
            fi
          fi
        fi
      done
    done
  done
  echo "$msx_module_found"
}

msx_module_list()
{
  local msx_module_wanted msx_module_found msx_module
  msx_module_wanted=("$@")
  msx_module_found=$(msx_module_get "${msx_module_wanted[@]}")

  # only wanted module
  if [[ -n "${msx_module_wanted[*]}" ]] && [[ -z "$msx_module_found" ]]
  then
    for msx_module in "${msx_module_wanted[@]}"
    do
      echo "module $msx_module not found!"
    done
    return 1
  fi

  # all modules
  for msx_module in $msx_module_found
  do
    local _category_tmp="${msx_module%/*}"
    local _module_tmp="${msx_module##*/}"

    local _category="${category_tmp##*/}"
    local _module="${module_tmp%.msx}"

    echo "${category} ${module}"
  done | column -t
}

msx_module_run()
{
  local msx_module_found msx_module_path msx_module_name_msx msx_module_name
  local msx_module_app msx_module_app_found msx_module_app_open

  msx_module_found="$1"
  msx_module_app_found=0

  for msx_module_path in $msx_module_found
  do
    msx_module_name_msx="${msx_module_path##*/}"
    msx_module_name="${msx_module_name_msx%.msx}"

    source "$msx_module_path"

    # enabled
    if [[ "$msx_module_enabled" == true ]]
    then

      # app check
      if [[ -n "${msx_module_appcheck[*]}" ]]
      then
        for msx_module_app in "${msx_module_appcheck[@]}"
        do
          if [[ -e "$msx_module_app" ]]
          then
            msx_module_app_found=1
            msx_module_app_open="$msx_module_app"
          fi
        done

        # app not found
        if [[ "$msx_module_app_found" -ne 1 ]]
        then
          break
        fi
      fi

      # main
      if [[ $(type -t msx_module_main) == "function" ]]
      then
        echo "[M] $msx_module_name"
        msx_module_main
      else
        echo "[X] $msx_module_name"
      fi

    else
      echo "[D] $msx_module_name"
    fi
  done
}

msx_show_usage()
{
  echo "$msx_self $msx_version ( $msx_url )"
  echo "Usage: $msx_self [-Dhl] -c config [-m module ]"
}

msx_show_help()
{
  msx_show_usage
  echo "Options:"
  echo "  -D        : Enable debug output"
  echo "  -c config : Use configuration file (required)"
  echo "  -h        : Show this help"
  echo "  -l        : List available modules"
  echo "  -m module : Use module only, may be specified multiple times (default: all)"
  echo
  exit 1
}

msx_main()
{
  msx_check_support
  msx_check_sip
  msx_check_config # search_config?!

  local msx_module_wanted msx_module_found
  msx_module_wanted=("$@")
  msx_module_found=$(msx_module_get "${msx_module_wanted[@]}")

  msx_module_run "$msx_module_found"

  echo "[I] done."
}

# options
while getopts ":Dc:hlm:" opt
do
  case "$opt" in
    D)
      set -x
    ;;
    c)
      msx_config="$OPTARG"
      ;;
    h)
      msx_show_help
      ;;
    l)
      msx_module_list "${msx_module_select[@]}"
      exit 0
      ;;
    m)
      msx_module_select+=("$OPTARG")
      ;;
    \?)
      echo "-$OPTARG is invalid!"
      msx_show_usage
      exit 1
      ;;
    :)
      echo "-$OPTARG requires an argument!"
      msx_show_usage
      exit 1
      ;;
    *)
      msx_show_usage
      exit 1
    ;;
  esac
done

if [[ -z "$msx_config" ]]
then
  if [[ -n "$MSX_CONFIG" ]] && \
     [[ -e "$MSX_CONFIG" ]]
  then
    msx_config="$MSX_CONFIG"
  else
    echo "-c is mandatory!"
    msx_show_usage
    exit 1
  fi
fi

if [[ "$OPTIND" -eq 1 ]] || [[ "$OPTIND" -le "$#" ]]
then
  msx_show_usage
else
  msx_main "${msx_module_select[@]}"
fi
