#!/usr/bin/env bash
#

# defaults
_msx_prefix="/usr/local"
_msx_etc="$_msx_prefix/etc/macosetup"
_msx_share="$_msx_prefix/share/macosetup"

_msx_config_search=(
  "$(cd "$(dirname "${BASH_SOURCE[0]}")" && echo "$PWD")/etc"
  "$_msx_etc"
)
_msx_config=""
_msx_module_search=(
  "$(cd "$(dirname "${BASH_SOURCE[0]}")" && echo "$PWD")/share"
  "$_msx_share"
)

_msx_file_search=(
  "$_msx_share/files"
  "$(cd "$(dirname "${BASH_SOURCE[0]}")" && echo "$PWD")/share/files"
)

readonly _msx_module_category=(
  "shell"
  "homebrew"
  "system_preferences"
  "applications"
  "misc"
)

# user
readonly _msx_username="$(whoami)"
readonly _msx_fullname="$(finger -m "${_msx_username}" | awk '/Name:/ { print $4 }')"
readonly _msx_sip_status="$(csrutil status | awk -F'status: ' '{print $2}')"

# version
readonly _msx_self="$(basename "$0")"
readonly _msx_version="v0.0.1"
readonly _msx_url="https://sh0shin.org/macosetup"

_msx_check_support()
{
  if [[ "$OSTYPE" != darwin* ]]
  then
    echo "Only Darwin/macOS is supported!"
    exit 1
  fi
}

_msx_check_sip()
{
  if [[ "$_msx_sip_status" == "enabled" ]]
  then
    echo "[W] System Integrity Protection is enabled"
    echo "[W] Some settings may fail!"
    read -p "Press RETURN to continue." -r
  elif [[ "$_msx_sip_status" == "disabled." ]]
  then
    echo "[I] System Integrity Protection is disabled!"
  fi
}

_msx_check_config()
{
  if [[ -e "$_msx_config" ]]
  then
    echo "[I] using config: $_msx_config"
  else
    # TODO: search config in $_msx_config_search
    echo "[E] config not found: $_msx_config"
    #exit 1
  fi
}

_msx_list_module()
{
  local _msx_find_module

  for _msx_category in "${_msx_module_category[@]}"
  do
    echo "searching category: $_msx_category"

    for _msx_search in "${_msx_module_search[@]}"
    do
      if [[ -d "$_msx_search/$_msx_category" ]]
      then
        echo "found path: $_msx_search/$_msx_category"

        _msx_find_module="$(echo "$_msx_search/$_msx_category"/*.msx)"

        echo "found module:"
        for _msx_module in $_msx_find_module
        do
          _module="${_msx_module##*/}"
          echo "  ${_module%.msx}"
        done
        break
      fi
    done
  done
}

_msx_check_module()
{
  echo "check module"
}

_msx_run_module()
{
  echo "run module"
}

_msx_show_usage()
{
  echo "$_msx_self $_msx_version ( $_msx_url )"
  echo "Usage: $_msx_self [-Dhl] -c config [-m module ]"
}

_msx_show_help()
{
  _msx_show_usage
  echo "Options:"
  echo "  -D        : Enable debug output"
  echo "  -c config : Use configuration file (required)"
  echo "  -h        : Show this help"
  echo "  -l        : List available modules"
  echo "  -m module : Use module only, may be specified multiple times (default: all)"
  echo
  exit 1
}

_msx_main()
{
  _msx_check_support
  _msx_check_sip
  _msx_check_config # search_config?!

  # config (DEBUG only)
  for _msx_search in "${_msx_config_search[@]}"
  do
    echo "config search: $_msx_search"
  done

  # module (DEBUG only)
  if [[ -n "${_msx_module_select[*]}" ]]
  then
    for _msx_module in "${_msx_module_select[@]}"
    do
      echo "run: $_msx_module"
    done
  else
    echo "run: all"
  fi

  for _msx_search in "${_msx_module_search[@]}"
  do
    echo "module search: $_msx_search"
  done

  # files (DEBUG only)
  for _msx_search in "${_msx_file_search[@]}"
  do
    echo "file search: $_msx_search"
  done

  echo "done."
}

# options
while getopts ":Dc:hlm:" opt
do
  case "$opt" in
    D)
      set -x
    ;;
    c)
      _msx_config="$OPTARG"
      ;;
    h)
      _msx_show_help
      ;;
    l)
      _msx_list_module
      exit 0
      ;;
    m)
      _msx_module_select+=("$OPTARG")
      ;;
    \?)
      echo "-$OPTARG is invalid!"
      _msx_show_usage
      exit 1
      ;;
    :)
      echo "-$OPTARG requires an argument!"
      _msx_show_usage
      exit 1
      ;;
    *)
      _msx_show_usage
      exit 1
    ;;
  esac
done

if [[ -z "$_msx_config" ]]
then
  echo "-c is mandatory!"
  _msx_show_usage
  exit 1
fi

if [[ "$OPTIND" -eq 1 ]] || [[ "$OPTIND" -le "$#" ]]
then
  _msx_show_usage
else
  _msx_main
fi
